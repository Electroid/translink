!function(e,t){for(var n in t)e[n]=t[n]}(this,function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){const r=n(1);production()?t.event=function(e,t){var n=Buffer.from(e.data,"base64").toString();return"import"===n?r.importBuses():Promise.reject(new Error(`Unknown message of ${n}`))}:r.importBuses()},function(e,t,n){n(2);const r=n(4)(env("TRANSLINK_API_KEY")),i=n(7)(env("SQL_GOOGLE_KEY"));e.exports={importBuses:function(){return r.buses.then(e=>i.insertRows("translink","bus",e,{fields:["vehicle","trip","route","direction","destination","pattern","location:geography","time:timestamp"],indexFields:["vehicle","time"],timeField:"time"}))},queryBuses:function(e){return e=parseInt(e)||3,i.submitQuery("active buses",`\n        SELECT\n          bus.*,\n          ST_X(bus.location) as longitude,\n          ST_Y(bus.location) as latitude\n        FROM\n          \`$.translink.bus\` AS bus\n        RIGHT JOIN (\n          SELECT\n            vehicle,\n            MAX(time) AS time\n          FROM\n            \`$.translink.bus\`\n          WHERE\n            time BETWEEN TIMESTAMP_SUB(CURRENT_TIMESTAMP(), INTERVAL ${e} MINUTE)\n            AND CURRENT_TIMESTAMP()\n          GROUP BY\n            vehicle ) AS latest\n        ON\n          latest.vehicle = bus.vehicle\n          AND latest.time = bus.time\n        ORDER BY\n          time DESC\n    `)}}},function(e,t,n){global.dev=function(){return!process.env.GOOGLE},global.production=function(){return!dev()},global.env=function(e){return production()?process.env[e]:n(3)(e.replace(/.*/,"../secret.json"))[e]},process.on("unhandledRejection",(e,t)=>{throw e}),process.on("SIGINT",()=>{process.exit(1)})},function(e,t){function n(e){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}n.keys=function(){return[]},n.resolve=n,e.exports=n,n.id=3},function(e,t,n){const r=n(5),i=n(6),o="America/Vancouver";class s{constructor(e){this.apiKeys=e.split(",")}get apiKey(){return this.apiKeys[Math.floor(Math.random()*this.apiKeys.length)]}fetch(e,t={}){t.apikey=this.apiKey;var n=Object.keys(t).map(e=>`${e}=${t[e]}`).join("&");return r(`https://api.translink.ca/rttiapi/v1/${e}?${n}`,{simple:!0,json:!0,timeout:5e3})}get buses(){return this.fetch("buses").then(e=>e.map(e=>this.parseBus(e)).filter(Boolean))}parseBus(e){try{var t={vehicle:e.VehicleNo,trip:e.TripId,route:e.RouteNo.replace(/^0+/,""),direction:e.Direction,destination:e.Destination,pattern:e.Pattern,longitude:parseFloat(e.Longitude),latitude:parseFloat(e.Latitude),time:this.parseLocalTime(e.RecordedTime)};return 0==t.longitude||0==t.latitude?null:(t.id=`${t.vehicle}-${t.time}`,t.location=`POINT(${t.longitude} ${t.latitude})`,t)}catch(t){console.error(`Could not process bus ${JSON.stringify(e)} because of ${t}`)}return null}getLocalTime(e=null){return e?i(e).tz(o):i().tz(o)}parseLocalTime(e){var t=this.getLocalTime().format("YYYY-MM-DD"),n=this.getLocalTime(t).unix();production()&&(n+=28800);var[r,i]=e.split(" "),[o,s,u]=r.split(":").map(e=>parseInt(e));return"pm"===i&&o<12?o+=12:"am"===i&&12==o&&(o-=12),n+=60*o*60,n+=60*s,(n+=u)>Date.now()/1e3&&(n-=86400),this.getLocalTime(1e3*n).format()}}e.exports=function(){return new s(arguments[0])}},function(e,t){e.exports=require("request-promise")},function(e,t){e.exports=require("moment-timezone")},function(e,t,n){const r=n(8),i=n(9),{PubSub:o}=n(10);class s{constructor(e){var t;e=JSON.parse(Buffer.from(e,"base64"));if(this.id=e.project_id,production())t={projectId:this.id};else{var n=`google-${this.id}.json`;t={projectId:this.id,keyFilename:n},r.writeFileSync(n,JSON.stringify(e)),process.on("exit",()=>r.unlinkSync(n))}this.bigQuery=new i(t),this.pubSub=new o(t),this.tables={}}assertTable(e,t,n={}){var r=`${e}:${t}`;if(this.tables[r])return Promise.resolve(this.tables[r]);var i=n.fields;return i&&(i=i.map(e=>({name:(e=e.replace(/\s/g,"").split(":"))[0],type:e[1]||"string",mode:"REQUIRED"}))),this.bigQuery.dataset(e).get({autoCreate:!0}).then(e=>e[0].createTable(t,n={schema:i,clustering:{fields:n.indexFields},timePartitioning:{expirationMs:Number.POSITIVE_INFINITY,type:"DAY",field:n.timeField},original:n}).then(e=>(console.log(`Created table ${r} with ${JSON.stringify(n)}`),e)).catch(i=>{if(i.message.includes("Already Exists"))return e[0].table(t).get();throw Object.keys(n.original).length<=0?Error(`Table ${r} does not exist and no options were provided`):i})).then(e=>this.tables[r]=e[0])}insertRows(e,t,n,r={}){return console.log(`Inserting ${n.length} rows into ${e}:${t}`),n.length<=0?Promise.resolve():this.assertTable(e,t,r).then(e=>e.insert(n.map(e=>({insertId:e.id||JSON.stringify(e),json:e})),{raw:!0,skipInvalidRows:!0,ignoreUnknownValues:!0}))}submitQuery(e,t){var n=new Date;return t=t.replace(/\$/g,this.id),this.bigQuery.query({query:t}).then(t=>(console.log(`Query ${e} took ${(new Date-n)/1e3} seconds with ${t[0].length} rows`),t[0]))}publishMessage(e,t){return e=`projects/${this.id}/topics/${e}`,t?(t="object"==typeof t?JSON.stringify(t):t.toString(),console.log(`Publishing message '${t}' to ${e}`),this.pubSub.topic(e).get({autoCreate:!0}).then(e=>e[0].publish(Buffer.from(t)))):Promise.resolve()}}e.exports=function(){return new s(arguments[0])}},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("@google-cloud/bigquery")},function(e,t){e.exports=require("@google-cloud/pubsub")}]));